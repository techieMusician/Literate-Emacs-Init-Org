#+title: My Emacs Configuration Orgfile

* Table of Contents :toc:
- [[#welcome][Welcome]]
  - [[#intention][Intention]]
- [[#intro-and-initial-settings][Intro and initial settings]]
  - [[#intro][Intro]]
  - [[#settings-to-make-me-better-at-using-emacs][Settings to make me better at using emacs]]
  - [[#font-configuraition][Font Configuraition]]
- [[#manage-packages-with-use-package][Manage packages with use-package]]
  - [[#set-up-use-package-and-package-archives-elpa-and-melpa][Set up use-package and package archives ELPA and MELPA]]
  - [[#setting-up-themes][Setting up themes]]
  - [[#command-log-mode][Command log Mode]]
  - [[#ivy][IVY]]
  - [[#rainbow-parenthesis][Rainbow Parenthesis]]
  -  [[#which-key-a-panal-pop-to-tell-what-keys-match][which-key: a panal pop to tell what keys match]]
  -  [[#helpful-adds-more-useful-information-with-helpfiles][Helpful: adds more useful information with helpfiles]]
  - [[#set-up-projectile-na][Set up projectile N/A]]
  - [[#magit-settings][Magit Settings]]
  - [[#doom-mode][Doom Mode]]
  - [[#toc-org---auto-genteration-of-table-of-contents][toc-org - auto genteration of Table of Contents]]
-  [[#orgmode-settings][ORGMODE SETTINGS]]
- [[#org-babel-settings][Org-Babel Settings]]
  - [[#configure-babel-languages][Configure Babel Languages]]
  - [[#set-up-auto-matic-org-tangle][Set up auto-matic org-tangle]]
- [[#dont-change-this-custom-set-variables][DON'T CHANGE THIS: Custom set variables]]
  - [[#learn-more-about-what-this-means][learn more about what this means]]

* Welcome
Here is my configuration. This file creates an init.el which is loaded by Emacs at startup.

** Intention
This is my (admitedly) newest attempt at:
1. Creating my own emacs configuration from scratch
2. Get myself to use methods of planning and structure to allow myself to accomlish goals

* Intro and initial settings

** Intro
#+BEGIN_SRC emacs-lisp :tangle yes

  ;;;;;;Modified-by: Mike Grammes <mike.grammes@gmail.com>

  ;;;;; DO NOT MODIFY THIS FILE BY HAND
  ;;    This file is maintaned at ~/emacs.d.Mike/emacs.org
  ;;    Make all changes there

  ;;;;;This is my emacs config following youtube tut Emacs from Scratch
  ;;;;;I will be maintiaing this allongside a prelude config so I can decide
  ;;;;;Which I prefer. This is a work in progress

  ;;; Some of this will be added into an org file for literate programming.

  ;; use ln -s .emacs.d.Mike .emacs.d to create a soft link for this config
#+END_SRC

** Settings to make me better at using emacs
I turn off the annoying start message because I hate it. Turning off the scroll-bar, tool-bar and tool-tip make me use emacs like a big boy. Leaving the menu-bar is helpful for now.  Set line number mode to only appear when programming.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Inhibit annoying start message
  (setq inhibit-startup-message t)


  ;; Remove other UI crutches, be a big boy!
  (scroll-bar-mode -1)         ; Disable visable Scrollbar
  (tool-bar-mode -1)           ; Disable toolbar
  (tooltip-mode -1)            ; Disable tooltips
  (set-fringe-mode 10)         ; Give space around emacs
  (menu-bar-mode 1)            ;  Keep menubar

  ;; add line number mode globally
  (global-display-line-numbers-mode t)

  ;; Disable line numebers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-command-with-editor-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode -1))))
#+END_SRC

** Font Configuraition
#+BEGIN_SRC emacs-lisp :tangle yes
    ;;;; Font Configuration
    (defvar runemacs/default-font-size 100)
    (set-face-attribute 'default nil :font "Fira Code Retina" :height runemacs/default-font-size)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 110)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 115 :weight 'regular)
#+END_SRC

* Manage packages with use-package

** Set up use-package and package archives ELPA and MELPA
#+BEGIN_SRC emacs-lisp :tangle yes
    ;;; Manage packages with use-package

    ;; Initialize package sources
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
            (package-refresh-contents))

    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)
#+END_SRC

** Setting up themes
#+BEGIN_SRC emacs-lisp :tangle yes
    ;; Doom themes
    (use-package doom-themes
      :init (load-theme 'doom-tomorrow-night t))

#+END_SRC

** Command log Mode
This makes a nice window to the side for information
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package command-log-mode)
#+END_SRC

** IVY
Ivy is used for completion
Also uses counsel and swiper. Run M-x install-package counsel to get them
#+BEGIN_SRC emacs-lisp :tangle yes
    ;; Set up IVY for completion
    ;; ran M-x install-package cousel to get counsel and swiper
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper))
      :config
      (ivy-mode 1))

    ;; ivyrich is an ivy extenstion that gives extra info about commands
    (use-package ivy-rich
      :init
      (ivy-rich-mode 1))

    ;; configure counsel
    (use-package counsel
      :bind (("M-x" . counsel-M-x)
             ("C-x b" . counsel-ibuffer)
             ("C-x C-f" . counsel-find-file)
             :map minibuffer-local-map
             ("C-r" . 'counsel-minibuffer-history))
      :config
      (counsel-mode 1))
#+END_SRC

** Rainbow Parenthesis
    add rainbow parenthesis to programming modes making it look better
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

**  which-key: a panal pop to tell what keys match
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package which-key
      :init (which-key-mode)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0.3)
      (define-key help-map "\C-h" 'which-key-C-h-dispatch))
#+END_SRC

**  Helpful: adds more useful information with helpfiles
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package helpful
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ("C-c C-d" . helpful-at-point)
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
#+END_SRC

** Set up projectile N/A
I am currently not using this
#+BEGIN_SRC emacs-lisp 
    ;; set up projectile
    (use-package projectile
      :diminish projectile-mode
      :config (projectile-mode)
      :custom ((projectile-competion-system 'ivy))
      :bind-keymap
      ("C-c p" . projectile-command-map)
      :init
      (when (file-directory-p "~/github")
        (setq projectile-project-search-path '("~/github")))
      (setq projectile-switch-project-action #'projectile-dired))

    (use-package counsel-projectile
      :config (counsel-projectile-mode))
#+END_SRC

** Magit Settings
#+BEGIN_SRC emacs-lisp :tangle yes
    ;; set up magit for git integration
    (use-package magit)
    ;; look into force for github integration
#+END_SRC

** Doom Mode
Currently uses auto-revert-check-vc-info to stay current with git branches.


#+NAME: doomMode
#+BEGIN_SRC emacs-lisp :tangle yes
   (use-package doom-modeline
        :init (doom-modeline-mode 1)
        :custom ((doom-modeline-height 15)))

  (use-package all-the-icons)
  (setq auto-revert-check-vc-info t)
#+END_SRC

** toc-org - auto genteration of Table of Contents
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC
*  ORGMODE SETTINGS

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))


  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
  ;;; Setu orgmode
  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :bind
    ("C-c c" . org-capture)
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    :config
    (setq org-ellipsis " ▾")
                                          ; (setq org-ellipsis " ^")
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'note)
    (setq org-log-into-drawer t)
    (setq org-agenda-files
          '("~/org/inbox.org"
            "~/org/projects.org"
            "~/org/homeserver.org"))
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)
    (setq org-todo-keywords
          '((sequence "TODO(t!)" "NEXT(n@/!)" "|" "DONE(d@/!)")))
    (setq org-refile-targets
          '(("archives.org" :maxlevel . 1)
            ("tasks.org" :maxlevel . 1)
            ("projects.org" :maxlevel . 1)))
    ;; Save Org buffers after refiling:
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    ;; add tags
    (setq org-tag-alist
          '((:startgroup)
                                          ;put mutually exclusize tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@music" . ?M)
            ("idea" . ?i)
            ("note" . ?n)))
    ;; Configure custom agenda views

    ;; Configure org-capture templates
    (setq org-capture-templates
      `(("t" "Task" entry (file "~/org/inbox.org")
         "* TODO %?\n  %U\n  %i" :empty-lines 1)))
    (require 'org-protocol)
    (efs/org-font-setup))

  ;;;; Setup org-roam
  (use-package org-roam
    :config
    (setq org-roam-directory "~/org")
    (add-hook 'after-init-hook 'org-roam-mode)
      ;; Configure org-roam-capture templates
    (setq org-roam-capture-templates
      `(("d" "default" plain (function org-roam-capture--get-point)
         "%?"
         :file-name "%<%Y%m%d%H%M%S>-${slug}"
         :head "#+title: ${title}\n"
         :unnarrowed t)
        ("t" "Task" plain (function org-roam-capture--get-point)
         "* TODO %?\n %U\n %i" :empty-lines 1
         :file-name "%<%Y%m%d%H%M%S>-${slug}"
         :head "#+title: ${title}\n"
         :unnarrowed t)))

    (require 'org-roam-protocol))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode t))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+END_SRC

* Org-Babel Settings
** Configure Babel Languages
To execute or export code make sure to load languages.  Setup =org-babel-load-languages= for each language to use

#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp .t)
     (python . t)
     (shell . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+END_SRC

:Results:
#+RESULTS:
: ((conf-unix . conf-unix) (C . c) (C++ . c++) (asymptote . asy) (bash . sh) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (shell . sh) (sqlite . sql))
:END:
** Set up auto-matic org-tangle
add a hook to make org-babel tangle file on save
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'org-mode-hook
            (lambda () (add-hook 'after-save-hook #'org-babel-tangle
                            :append :local)))
#+END_SRC

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'org-babel-tangle :append :local)) | efs/org-mode-visual-fill | org-bullets-mode | efs/org-mode-setup | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (lambda nil (display-line-numbers-mode -1)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

* DON'T CHANGE THIS: Custom set variables
there can only be one of these

** TODO learn more about what this means
#+BEGIN_SRC emacs-lisp :tangle yes
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages
     '(zetteldeft deft doom-modeline org-roam-protocol unicode-fonts org-roam visual-fill-column org-bullets which-key use-package rainbow-delimiters ivy-rich helpful general forge doom-themes counsel-projectile command-log-mode all-the-icons)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC

